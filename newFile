package com.solix;

//import java.lang.annotation.Target;
import java.util.Properties;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

public class NewTrasfer {// TransferFiles class name

	public static void main(String[] args) throws Exception { // Main method
		String sourceip = null;
		String targetip = null;
		String tagetpath = null;
		String targetuser = null;
		String targetpwd = null;
		String sourceuser = null;
		String sourcepwd = null;
	    String sourcepath = null;
		String port = null;
		Session sourceSession = null; // Session is class name and sourceSession is its object
		Session targetSession = null; // Session is class name and sourceSession is its object
		//String localTempPath = null;// String localTempPath variable

		// This are soure inputs
		sourceip = "192.168.1.67";
		sourcepath = "/home/praveen/sapArchiving/sapArching.txt";
		sourceuser = "praveen";
		sourcepwd = "Nallappa@01";

		// This are target inputs
		targetip = "192.168.1.67";
 		tagetpath = "/home/naveen/java/";
 		targetuser = "naveen";
 		targetpwd = "Naveen@01";

		//localTempPath = "C:\\WIP\\temp\\";
		ChannelSftp sourcesftpChannel = null; // sourcesftpChannel is the object of chanel ChannelSftp
		ChannelSftp targetftpChannel = null;
		port = "22";// port 22 for SSh secure shell Connection
		
		
		
		try {
			sourceSession = createSFTPSession(sourceuser, sourceip, sourcepwd, port);
			// here we are creating connection with source
			sourcesftpChannel = (ChannelSftp) sourceSession.openChannel("sftp");
			sourcesftpChannel.connect(); // connect() is the method from Channel class used to establish connection

			
			targetSession = createSFTPSession(targetuser, targetip, targetpwd, port);
            targetftpChannel = (ChannelSftp) targetSession.openChannel("sftp");
            targetftpChannel.connect();
            System.out.println(targetftpChannel.toString());
           // uploadFile(targetftpChannel,targetSession,sourcepath,tagetpath);
            targetftpChannel.put(sourcepath,tagetpath+"new.txt");
            System.out.println(targetftpChannel.toString());
		} 
		catch (Exception e) {// if

		} 
		finally {
			sourcesftpChannel.disconnect();// its  disconnect() channel
			sourceSession.disconnect();// its close session
		}
		
//		public void uploadFile() throws JSchException, SftpException {
//		      //  System.out.printf("Uploading [%s] to [%s]...%n", localPath, remotePath);
//		        if (targetftpChannel == null) {
//		            throw new IllegalArgumentException("Connection is not available");
//		        }
//		        targetftpChannel.put(sourcepath,tagetpath);
//		    }

	}

//	public static void uploadFile(ChannelSftp targetftpChannel,Session targetSession,String sourcepath,String tagetpath)  throws JSchException, SftpException {
//		ChannelSftp channel = targetftpChannel;
//		Session session = targetSession;
//		if (channel == null) {
//            throw new IllegalArgumentException("Connection is not available");
//        }
//		System.out.println(channel.toString());
//        channel.put(sourcepath,tagetpath+"new.txt");
//        
//        channel.disconnect();// its  disconnect() channel
//		session.disconnect();// its close session
//    }	


	private static Session createSFTPSession(final String user, final String host, final String pass,
			final String port) {
		Session session = null;
		try {
			final int pt = Integer.parseInt(port);
			final Properties config = new Properties();// config is the Properties class Object
			config.put("StrictHostKeyChecking", "no");// put(k=v)
			final JSch jsch = new JSch();
			session = jsch.getSession(user, host, pt);// this getSession() session object with host user
														// and port detail.
			session.setPassword(pass);
			session.setConfig(config);
			session.connect();
			System.out.println("Session created and connected Successfully : "+user);
		} catch (Exception e) {
			System.out.println(("Exception in createSession() ::" + e.getMessage()));
		}
		return session;
	}
}
=============================================================================================================

package com.solix;


import com.jcraft.jsch.*;

import java.util.Properties;
import java.util.Vector;

/**
 * A simple SFTP client using JSCH http://www.jcraft.com/jsch/
 */
public final class SftpClient {
    private final String      host ="192.168.1.67";
    private final int         port =22;
    private final String      username ="praveen";
    private final JSch        jsch;
    private       ChannelSftp channel;
    private       Session     session ;
    jsch          = new JSch();

    /**
     * @param host     remote host
     * @param port     remote port
     * @param username remote username
     */
//    public SftpClient(String host, int port, String username) {
//        this.host     = host;
//        this.port     = port;
//        this.username = username;
       
//    }

    /**
     * Use default port 22
     *
     * @param host     remote host
     * @param username username on host
     */
//    public SftpClient(String host, String username) {
//        this("192.168.1.67", 22, "praveen");
//    }

    /**
     * Authenticate with remote using password
     *
     * @param password password of remote
     * @throws JSchException If there is problem with credentials or connection
     */
    public void authPassword() throws JSchException {
        session = jsch.getSession(username, host, port);
        //disable known hosts checking
        //if you want to set knows hosts file You can set with jsch.setKnownHosts("path to known hosts file");
        Properties config = new Properties();
        config.put("StrictHostKeyChecking", "no");
        session.setConfig(config);
        session.setPassword("Nallappa@01");
        session.connect();
        channel = (ChannelSftp) session.openChannel("sftp");
        channel.connect();
    }
    
    public void uploadFile() throws JSchException, SftpException {
      //  System.out.printf("Uploading [%s] to [%s]...%n", localPath, remotePath);
        if (channel == null) {
            throw new IllegalArgumentException("Connection is not available");
        }
        channel.put("C:\\Users\\A\\Desktop\\praveen.txt", "/home/praveen/java/");
    }


//    public void authKey(String keyPath, String pass) throws JSchException {
//        jsch.addIdentity(keyPath, pass);
//        session = jsch.getSession(username, host, port);
//        //disable known hosts checking
//        //if you want to set knows hosts file You can set with jsch.setKnownHosts("path to known hosts file");
//        var config = new Properties();
//        config.put("StrictHostKeyChecking", "no");
//        session.setConfig(config);
//        session.connect();
//        channel = (ChannelSftp) session.openChannel("sftp");
//        channel.connect();
//    }
    
    public void close() {
        if (channel != null) {
            channel.exit();
        }
        if (session != null && session.isConnected()) {
            session.disconnect();
        }
    }
}


==================================================================================
package com.solix;

import java.io.File;      
import java.io.FileInputStream;      
import java.io.FileOutputStream;       
import java.io.ObjectInputFilter.Config;       
import java.util.ArrayList;             
import java.util.List;                 
import java.util.Properties;      

import javax.naming.spi.DirStateFactory.Result;   

import com.jcraft.jsch.ChannelSftp;  
import com.jcraft.jsch.JSch;  
import com.jcraft.jsch.JSchException;   
import com.jcraft.jsch.Session;   


public class TransferFiles {

    public static void main(String[] args) throws Exception {
        String sourceip = null;
        String targetip = null;
        String tagetpath = null;
        String targetuser = null;
        String targetpwd = null;
        String sourceuser = null;
        String sourcepwd = null;
        String sourcepath = null;
        String port = "22";
        Session sourceSession = null;
        Session targetSession = null;
        //String localTempPath = null;
        FileOutputStream fos = null;

     // This are soure inputs
     		sourceip = "192.168.1.67";
     		sourcepath = "/home/praveen/sapArchiving/sapArching.txt";
     		sourceuser = "praveen";
     		sourcepwd = "Nallappa@01";

     		// This are target inputs
     		targetip = "192.168.1.67";
     		tagetpath = "/home/praveen/java/";
     		targetuser = "praveen";
     		targetpwd = "Nallappa@01";

        //localTempPath = "/home/naresh/movefiles/naresh.txt";
                ChannelSftp sourcesftpChannel = null;
                ChannelSftp targetftpChannel = null;
                port = "22";
        
        try {
        	Session session = null;
        	final int pt = Integer.parseInt(port);
			final Properties config = new Properties();// config is the Properties class Object
			config.put("StrictHostKeyChecking", "no");// put(k=v)
			final JSch jsch = new JSch();
			session = jsch.getSession(sourceuser, sourceip, pt);// this getSession() session object with host user
														// and port detail.
			session.setPassword(sourcepwd);
			session.setConfig(config);
			session.connect();
			System.out.println("Session created and connected Successfully");
		
            
            sourceSession = createSFTPSession(sourceuser, sourceip, sourcepwd, port);
            sourcesftpChannel = (ChannelSftp) sourceSession.openChannel("sftp");
            sourcesftpChannel.connect();
            
            targetSession = createSFTPSession(targetuser, targetip, targetpwd, port);
            targetftpChannel = (ChannelSftp) targetSession.openChannel("sftp");
            targetftpChannel.connect();
            
            
            /*
             * JSch jsch = new JSch(); jsch.setKnownHosts(
             * "/home/praveen/sapArichiveMoveFiles/sapArichiveMoveFiles.txt"); Session
             * jschSession = jsch.getSession(sourceuser, sourcepath);
             * jschSession.setPassword(sourcepwd); jschSession.connect();
             */
                
                
//                fos = new FileOutputStream("sapArichiveMoveFiles.txt");
//                sourcesftpChannel.cd(sourcepath);
//                sourcesftpChannel.get("sapArichiveMoveFiles.txt", fos);
//                fos.flush(); 
//                
                
//                File srcFile = new File("sapArichiveMoveFiles.txt");
//                targetftpChannel.cd(tagetpath);
//                FileInputStream srcFIS = new FileInputStream(srcFile);
//                targetftpChannel.put(srcFIS, srcFile.getName());
//                
//                System.out.println("file transfered...");

        } catch (Exception e) {
            System.out.println(e);
        
            
        } finally {
            /*
             * sourcesftpChannel.disconnect(); sourceSession.disconnect();
             * targetftpChannel.disconnect(); targetftpChannel.disconnect();
             */
        }

    }
    /*
     * file from source 
     *                      fos = new FileOutputStream(sapArichiveMoveFiles.txt);                  
     *                      channelSftp.cd(sourcepath);                                    
     *                       channelSftp.get(sapArichiveMoveFiles.txt, fos);
     *                     
     *                         fos.flush(); 
     * 
     *                       onto target channelSftpTgt.cd(targetDir); 
     *  
     *                            FileInputStream srcFIS = new FileInputStream(sapArichiveMoveFiles.tx);
     *                                                            
     *                          channelSftpTgt.put(srcFIS, srcFile.getName());
     */

    private static Session createSFTPSession(final String user, final String host, final String pass,
            final String port) {

        Session session11 = null;
        try {
            final int pt = Integer.parseInt(port);
           // final Properties config = new Properties();
            JSch jsch1 = new JSch();
            
            session11 = jsch1.getSession("praveen", "praveen", pt);
            session11.setPassword("Nallappa@01");
            session11.setConfig("StrictHostKeyChecking", "no");
            session11.connect();
            ChannelSftp channel = null;
            channel = (ChannelSftp) session11.openChannel("sftp");
            channel.connect();
            
            //fos = new FileOutputStream(sapArichiveMoveFiles.txt);
            
            
            /*
             * File localFile = new File("localfilepath"); channel.put(new
             * FileInputStream(localFile), localFile.getName()); channel.disconnect();
             * session11.disconnect();
             */
            System.out.println("Session created and connected Successfully");
        } catch (Exception e) {
            System.out.println(("Exception in createSession() ::" + e.getMessage()));
        }
        return session11;
    }
}
=====
